##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [2.30.0] date: [Fri Oct 19 12:25:47 PDT 2018]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET_MODULE:=bkc-module


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og

SED := sed
PYTHON := python
SHA := $(shell git rev-parse --short=8 HEAD)
SHORT_VERSION_DATE := $(shell git show -s --format=%cd --date=format:%y%m%d)
SHORT_VERSION_STR := $(SHORT_VERSION_DATE)$(SHA)

GNU_ARM_TOOLS_VER_1 := 7
GNU_ARM_TOOLS_VER_2 := 2017-q4-major


#######################################
# paths
#######################################
GIT_ROOT_DIR    := $(shell git rev-parse --show-toplevel)
LIB_DIR = $(GIT_ROOT_DIR)/libs
BUILD_DIR = $(GIT_ROOT_DIR)/build/obj_$(TARGET_MODULE)
APP_SRC_DIR = $(GIT_ROOT_DIR)/app/src
APP_INC_DIR = $(GIT_ROOT_DIR)/app/inc

######################################
# source
######################################

#######################################
# binaries
#######################################
# If we running by kernel building system
ifneq ($(KERNELRELEASE),)
	$(TARGET_MODULE)-objs := myModule.o deviceDriver.o
	obj-m := $(TARGET_MODULE).o

HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

#######################################
# CFLAGS
#######################################

#libs directory includes and srcs
LIB_INCLUDES =
LIB_INCLUDES += -I$(LIB_DIR)
LIB_INCLUDES += -I$(LIB_DIR)/genericHelpers/inc

C_INCLUDES += $(LIB_INCLUDES)

LIBSOURCES =
LIBSOURCES += $(LIB_DIR)/display/src/helper.c


C_SOURCES += $(LIBSOURCES)

# AS includes
AS_INCLUDES =  \
-I\Inc

# Add application sources and include path
APPSOURCES =
APPSOURCES += $(APP_SRC_DIR)/deviceDriver.c
APPSOURCES += $(APP_SRC_DIR)/myModule.c


C_SOURCES += $(APPSOURCES)
C_INCLUDES += -I$(APP_INC_DIR)

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#######################################
# LDFLAGS
#######################################

# libraries
LIBS = -lc -lm -lnosys -lrps

# default action: build all
all: prebuild $(BUILD_DIR)/$(TARGET_MODULE).elf $(BUILD_DIR)/$(TARGET_MODULE).hex $(BUILD_DIR)/$(TARGET_MODULE).bin

prebuild:
	$(CC) --version

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	@echo "Building $@"
	@$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@echo "Building $@"
	@$(AS) -c $(CFLAGS) $< -o $@

$(RP_DIR)/build/librps.a: Makefile
	@echo "Building $@"
	make wlan CC=$(CC) -Wall -C $(RP_DIR)/build/ path_config=$(PATH_CONFIG)

$(BUILD_DIR)/$(TARGET_MODULE).elf: $(OBJECTS) Makefile $(RP_DIR)/build/librps.a
	@echo "Building $@"
	@$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	@$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	@echo "Building $@"
	@$(HEX) $< $@

$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	@echo "Building $@"
	@$(BIN) $< $@

$(BUILD_DIR):
	@echo "Building $@"
	mkdir $@

#######################################
# Start of a release script
#######################################
# Example: make release_fw
# VERSION_TAG := release-$(TARGET_MODULE)-$(SHORT_VERSION_STR)
# RELEASE_DIR := $(VERSION_TAG)
# RELEASE_FILES := $(RELEASE_DIR)/files
# RELEASE_URL := https://simplexity.atlassian.net/wiki/spaces/TAG/pages/616497156/Firmware+Releases
# RELEASE_XHTML_TEMPLATE := `pwd`/standard_release_page_template.xhtml
# RELEASE_YAML := $(RELEASE_DIR)/$(TARGET_MODULE)_release.yaml
# RELEASE_XHTML := $(RELEASE_DIR)/$(TARGET_MODULE)_release.html

# release_tag:
# 	@git tag $(VERSION_TAG) 

# # Setups of directories and YAML release config.
# release_post_setup:
# 	@-rm -rf $(RELEASE_DIR)
# 	@mkdir $(RELEASE_DIR)
# 	@mkdir $(RELEASE_FILES)
# 	@cp -f $(RELEASE_XHTML_TEMPLATE) $(RELEASE_XHTML)
# 	@$(GIT_ROOT_DIR)/tools/release_notes $(TARGET_MODULE) > $(RELEASE_DIR)/$(TARGET_MODULE)-$(SHORT_VERSION_STR)-commit-comments.html
# 	@$(SED) -e '/.*COMMENTS.*/{r $(RELEASE_DIR)/$(TARGET_MODULE)-$(SHORT_VERSION_STR)-commit-comments.html' -e ' d}' < $(RELEASE_XHTML_TEMPLATE) > $(RELEASE_XHTML)

# # Setup of release files
# release_post_files:
# 	# TARGET binaries
# 	@cp $(BUILD_DIR)/*.elf $(RELEASE_FILES)/$(TARGET_MODULE)-$(SHORT_VERSION_STR).elf
# 	@cp $(BUILD_DIR)/*.hex $(RELEASE_FILES)/$(TARGET_MODULE)-$(SHORT_VERSION_STR).hex
# 	@cp $(BUILD_DIR)/*.map $(RELEASE_FILES)/$(TARGET_MODULE)-$(SHORT_VERSION_STR).map

# # Post files to wiki
# release_post_all: release_post_setup release_post_files
# 	@$(PYTHON) $(GIT_ROOT_DIR)/tools/create_release_yaml.py -f $(RELEASE_FILES) -o $(RELEASE_YAML) -v $(SHORT_VERSION_STR) -p $(TARGET_MODULE) -u $(RELEASE_URL) -x $(RELEASE_XHTML)
# 	@$(PYTHON) $(GIT_ROOT_DIR)/tools/confluence_post.py -f $(RELEASE_YAML) -u $(CONFLUENCE_USER) -p $(CONFLUENCE_PASS)

# # Main fw release controller
# release_fw: release_tag release_post_all
# 	@git push origin $(VERSION_TAG)

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
	-rm -rf release-*

help:
	@echo "C_SOURCES= $(C_SOURCES)"
	@echo "C_INCLUDES = $(C_INCLUDES)"
	@echo "OBJECTS = $(OBJECTS)"
	@echo "BUILD_DIR= $(BUILD_DIR)"
	@echo "DSPL_SOURCES= $(DSPL_SOURCES)"

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
